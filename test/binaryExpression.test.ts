import { exec } from '../src';

test.each`
    left      | right        | operator | expected
    ${10}     | ${20}        | ${'+'}   | ${10 + 20}
    ${10}     | ${20}        | ${'-'}   | ${10 - 20}
    ${10}     | ${20}        | ${'*'}   | ${10 * 20}
    ${20}     | ${10}        | ${'/'}   | ${20 / 10}
    ${2}      | ${3}         | ${'**'}  | ${2 ** 3}
    ${100}    | ${17}        | ${'%'}   | ${100 % 17}
    ${0b0011} | ${0b0101}    | ${'&'}   | ${0b0011 & 0b0101}
    ${0b0011} | ${0b0101}    | ${'|'}   | ${0b0011 | 0b0101}
    ${0b0011} | ${2}         | ${'<<'}  | ${0b0011 << 2}
    ${0b1100} | ${2}         | ${'>>'}  | ${0b1100 >> 2}
    ${-5}     | ${2}         | ${'>>>'} | ${-5 >>> 2}
    ${5}      | ${3}         | ${'^'}   | ${5 ^ 3}
    ${1}      | ${2}         | ${'=='}  | ${false}
    ${1}      | ${2}         | ${'!='}  | ${!false}
    ${null}   | ${undefined} | ${'=='}  | ${true}
    ${null}   | ${undefined} | ${'!='}  | ${!true}
    ${0}      | ${false}     | ${'=='}  | ${true}
    ${0}      | ${false}     | ${'!='}  | ${!true}
    ${0}      | ${false}     | ${'==='} | ${false}
    ${0}      | ${false}     | ${'!=='} | ${!false}
    ${17}     | ${17}        | ${'==='} | ${true}
    ${17}     | ${17}        | ${'!=='} | ${!true}
    ${3}      | ${5}         | ${'<'}   | ${true}
    ${3}      | ${5}         | ${'<='}  | ${true}
    ${3}      | ${5}         | ${'>'}   | ${false}
    ${3}      | ${5}         | ${'>='}  | ${false}
    ${17}     | ${17}        | ${'<'}   | ${false}
    ${17}     | ${17}        | ${'<='}  | ${true}
    ${17}     | ${17}        | ${'>'}   | ${false}
    ${17}     | ${17}        | ${'>='}  | ${true}
    ${'"3"'}  | ${5}         | ${'<'}   | ${true}
    ${'"3"'}  | ${5}         | ${'<='}  | ${true}
    ${'"3"'}  | ${5}         | ${'>'}   | ${false}
    ${'"3"'}  | ${5}         | ${'>='}  | ${false}
    ${3}      | ${'"5"'}     | ${'<'}   | ${true}
    ${3}      | ${'"5"'}     | ${'<='}  | ${true}
    ${3}      | ${'"5"'}     | ${'>'}   | ${false}
    ${3}      | ${'"5"'}     | ${'>='}  | ${false}
    ${'"b"'}  | ${'"a"'}     | ${'<'}   | ${false}
    ${'"b"'}  | ${'"a"'}     | ${'<='}  | ${false}
    ${'"b"'}  | ${'"a"'}     | ${'>'}   | ${true}
    ${'"b"'}  | ${'"a"'}     | ${'>='}  | ${true}
`('BinaryExpression', ({ left, right, operator, expected }) => {
    const actual = exec(
        `
let left = ${left};
let right = ${right};
left ${operator} right;
        `,
        {}
    );
    expect(actual.result).toBe(expected);
});
