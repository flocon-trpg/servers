# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AvailableGameSystem {
  id: String!
  name: String!
  sortKey: String!
}

enum ChangeParticipantNameFailureType {
  NotFound
  NotParticipant
}

type ChangeParticipantNameResult {
  failureType: ChangeParticipantNameFailureType
}

type CharacterValueForMessage {
  image: FilePath
  isPrivate: Boolean!
  name: String!
  stateId: String!
  tachieImage: FilePath
}

type CommandResult {
  # 成功判定のないコマンドの場合はnullish。成功判定のあるコマンドの場合はその結果。
  isSuccess: Boolean
  text: String!
}

type CreateRoomFailureResult {
  failureType: CreateRoomFailureType!
}

enum CreateRoomFailureType {
  UnknownError
}

input CreateRoomInput {
  joinAsPlayerPhrase: String
  joinAsSpectatorPhrase: String
  participantName: String!
  roomName: String!
}

union CreateRoomResult = CreateRoomFailureResult | CreateRoomSuccessResult

type CreateRoomSuccessResult {
  id: String!
  room: RoomGetState!
}

enum DeleteMessageFailureType {
  MessageDeleted
  MessageNotFound
  NotParticipant
  NotYourMessage
  RoomNotFound
}

type DeleteMessageResult {
  failureType: DeleteMessageFailureType
}

enum DeleteRoomFailureType {
  NotCreatedByYou
  NotFound
}

type DeleteRoomOperation {
  deletedBy: String!
}

type DeleteRoomResult {
  failureType: DeleteRoomFailureType
}

input EditFileTagActionInput {
  add: [String!]!
  filename: String!
  remove: [String!]!
}

input EditFileTagsInput {
  actions: [EditFileTagActionInput!]!
}

enum EditMessageFailureType {
  MessageDeleted
  MessageNotFound
  NotParticipant
  NotYourMessage
  RoomNotFound
}

type EditMessageResult {
  failureType: EditMessageFailureType
}

type EntryToServerResult {
  type: EntryToServerResultType!
}

enum EntryToServerResultType {
  AlreadyEntried
  NoPhraseRequired
  NotSignIn
  Success
  WrongPhrase
}

type FileItem {
  createdAt: Float

  # ファイルをアップロードしたユーザー。Firebase AuthenticationのUserUidで表現される。
  createdBy: String!

  # サーバーで管理されているファイル名。axiosなどでファイルを取得する際はこれを用いる。ソートするとアップロードした時系列順になる。
  filename: ID!

  # ユーザーが名付けたファイル名。
  screenname: String!

  # サムネイル画像のファイル名。axiosなどを用いてファイルを取得する。
  thumbFilename: String
}

type FilePath {
  path: String!
  sourceType: FileSourceType!
}

input FilePathInput {
  path: String!
  sourceType: FileSourceType!
}

enum FileSourceType {
  Default
  FirebaseStorage
  Uploader
}

type FileTag {
  id: String!
  name: String!
}

type GetAvailableGameSystemsResult {
  value: [AvailableGameSystem!]!
}

input GetFilesInput {
  # FileTagのidを指定することで、指定したタグが付いているファイルのみを抽出して表示する。例えばidがx,yの3つのタグが付いているファイルは、[]や[x]や[x,y]と指定した場合にマッチするが、[x,y,z]と指定された場合は除外される。
  fileTagIds: [String!]!
}

type GetFilesResult {
  files: [FileItem!]!
}

type GetJoinedRoomResult {
  # 自分の現在のParticipantRole。
  role: ParticipantRole!
  room: RoomGetState!
}

type GetNonJoinedRoomResult {
  roomAsListItem: RoomAsListItem!
}

type GetRoomAsListItemFailureResult {
  failureType: GetRoomFailureType!
}

union GetRoomAsListItemResult = GetRoomAsListItemFailureResult | GetRoomAsListItemSuccessResult

type GetRoomAsListItemSuccessResult {
  room: RoomAsListItem!
}

enum GetRoomConnectionFailureType {
  NotParticipant
  RoomNotFound
}

type GetRoomConnectionsFailureResult {
  failureType: GetRoomConnectionFailureType!
}

union GetRoomConnectionsResult = GetRoomConnectionsFailureResult | GetRoomConnectionsSuccessResult

type GetRoomConnectionsSuccessResult {
  connectedUserUids: [String!]!
  fetchedAt: Float!
}

type GetRoomFailureResult {
  failureType: GetRoomFailureType!
}

enum GetRoomFailureType {
  NotFound
}

type GetRoomLogFailureResult {
  failureType: GetRoomLogFailureType!
}

enum GetRoomLogFailureType {
  NotAuthorized
  NotParticipant
  RoomNotFound
  UnknownError
}

union GetRoomLogResult = GetRoomLogFailureResult | RoomMessages

type GetRoomMessagesFailureResult {
  failureType: GetRoomMessagesFailureType!
}

enum GetRoomMessagesFailureType {
  NotParticipant
  RoomNotFound
}

union GetRoomMessagesResult = GetRoomMessagesFailureResult | RoomMessages

union GetRoomResult = GetJoinedRoomResult | GetNonJoinedRoomResult | GetRoomFailureResult

type GetRoomsListFailureResult {
  failureType: GetRoomFailureType!
}

union GetRoomsListResult = GetRoomsListFailureResult | GetRoomsListSuccessResult

type GetRoomsListSuccessResult {
  rooms: [RoomAsListItem!]!
}

type JoinRoomFailureResult {
  failureType: JoinRoomFailureType!
}

enum JoinRoomFailureType {
  AlreadyParticipant
  NotFound
  TransformError
  WrongPhrase
}

union JoinRoomResult = JoinRoomFailureResult | JoinRoomSuccessResult

type JoinRoomSuccessResult {
  operation: RoomOperation
}

enum LeaveRoomFailureType {
  NotFound
  NotParticipant
}

type LeaveRoomResult {
  failureType: LeaveRoomFailureType
}

enum MakeMessageNotSecretFailureType {
  MessageNotFound
  NotParticipant
  NotSecret
  NotYourMessage
  RoomNotFound
}

type MakeMessageNotSecretResult {
  failureType: MakeMessageNotSecretFailureType
}

type Mutation {
  changeParticipantName(newName: String!, roomId: String!): ChangeParticipantNameResult!
  createFileTag(tagName: String!): FileTag
  createRoom(input: CreateRoomInput!): CreateRoomResult!
  deleteFileTag(tagId: String!): Boolean!
  deleteFiles(filenames: [String!]!): [String!]!
  deleteMessage(messageId: String!, roomId: String!): DeleteMessageResult!
  deleteRoom(id: String!): DeleteRoomResult!
  editFileTags(input: EditFileTagsInput!): Boolean!
  editMessage(messageId: String!, roomId: String!, text: String!): EditMessageResult!
  entryToServer(phrase: String): EntryToServerResult!
  joinRoomAsPlayer(id: String!, name: String!, phrase: String): JoinRoomResult!
  joinRoomAsSpectator(id: String!, name: String!, phrase: String): JoinRoomResult!
  leaveRoom(id: String!): LeaveRoomResult!
  makeMessageNotSecret(messageId: String!, roomId: String!): MakeMessageNotSecretResult!
  operate(id: String!, operation: RoomOperationInput!, prevRevision: Int!, requestId: String!): OperateRoomResult!

  # for test
  ping(value: Float!): Pong!
  promoteToPlayer(phrase: String, roomId: String!): PromoteResult!
  updateWritingMessageStatus(newStatus: WritingMessageStatusInputType!, roomId: String!): Boolean!
  writePrivateMessage(
    characterStateId: String
    customName: String

    # BCDiceのgameType。
    gameType: String
    roomId: String!
    text: String!
    textColor: String
    visibleTo: [String!]!
  ): WriteRoomPrivateMessageResult!
  writePublicMessage(
    channelKey: String!
    characterStateId: String
    customName: String

    # BCDiceのgameType。
    gameType: String
    roomId: String!
    text: String!
    textColor: String
  ): WriteRoomPublicMessageResult!
  writeRoomSoundEffect(file: FilePathInput!, roomId: String!, volume: Float!): WriteRoomSoundEffectResult!
}

type OperateRoomFailureResult {
  failureType: OperateRoomFailureType!
}

enum OperateRoomFailureType {
  NotFound
}

type OperateRoomIdResult {
  requestId: String!
}

type OperateRoomNonJoinedResult {
  roomAsListItem: RoomAsListItem!
}

union OperateRoomResult = OperateRoomFailureResult | OperateRoomIdResult | OperateRoomNonJoinedResult | OperateRoomSuccessResult

type OperateRoomSuccessResult {
  operation: RoomOperation!
}

type OperatedBy {
  clientId: String!
  userUid: String!
}

enum ParticipantRole {
  Master
  Player
  Spectator
  ofNullishString
  ofString
}

type PieceValueLog {
  characterCreatedBy: String!
  characterId: String!
  createdAt: Float!
  logType: PieceValueLogType!
  messageId: String!
  stateId: String!
  valueJson: String!
}

enum PieceValueLogType {
  Dice
  Number
}

type Pong {
  createdBy: String
  value: Float!
}

type Prerelease {
  type: PrereleaseType!
  version: Float!
}

enum PrereleaseType {
  Alpha
  Beta
  Rc
}

enum PromoteFailureType {
  NoNeedToPromote
  NotFound
  NotParticipant
  WrongPhrase
}

type PromoteResult {
  failureType: PromoteFailureType
}

type Query {
  getAvailableGameSystems: GetAvailableGameSystemsResult!
  getDiceHelpMessage(id: String!): String
  getFiles(input: GetFilesInput!): GetFilesResult!
  getLog(roomId: String!): GetRoomLogResult!
  getMessages(roomId: String!): GetRoomMessagesResult!
  getRoom(id: String!): GetRoomResult!
  getRoomAsListItem(roomId: String!): GetRoomAsListItemResult!
  getRoomConnections(roomId: String!): GetRoomConnectionsResult!
  getRoomsList: GetRoomsListResult!
  getServerInfo: ServerInfo!
  isEntry: Boolean!
}

type RoomAsListItem {
  # この部屋の作成者。Firebase AuthenticationのUserUidで表現される。
  createdBy: String!
  id: ID!
  name: String!
  requiresPhraseToJoinAsPlayer: Boolean!
  requiresPhraseToJoinAsSpectator: Boolean!
}

type RoomConnectionEvent {
  isConnected: Boolean!
  updatedAt: Float!
  userUid: String!
}

type RoomEvent {
  deleteRoomOperation: DeleteRoomOperation
  roomConnectionEvent: RoomConnectionEvent
  roomMessageEvent: RoomMessageEvent
  roomOperation: RoomOperation
  writingMessageStatus: WritingMessageStatus
}

type RoomGetState {
  # この部屋の作成者。Firebase AuthenticationのUserUidで表現される。
  createdBy: String!

  # Current revision of Room. Whenever Room is updated, this value is incremented by 1. This value is required when you apply RoomOperation. / Roomの現在のリビジョン。Roomが更新されるたび、この値は1増加する。RoomOperationを適用する際に必要となる。
  revision: Float!

  # room.state をJSON化したもの
  stateJson: String!
}

union RoomMessageEvent = PieceValueLog | RoomPrivateMessage | RoomPrivateMessageUpdate | RoomPublicChannel | RoomPublicChannelUpdate | RoomPublicMessage | RoomPublicMessageUpdate | RoomSoundEffect

type RoomMessages {
  pieceValueLogs: [PieceValueLog!]!
  privateMessages: [RoomPrivateMessage!]!
  publicChannels: [RoomPublicChannel!]!
  publicMessages: [RoomPublicMessage!]!
  soundEffects: [RoomSoundEffect!]!
}

type RoomOperation {
  # operateRoomを呼んだ人物。promoteなどの結果の場合はnullishになる。
  operatedBy: OperatedBy
  revisionTo: Float!

  # room.upOperationをJSONにしたもの。idならばnullish。
  valueJson: String!
}

input RoomOperationInput {
  # クライアントを識別するID。適当なIDをクライアント側で生成して渡す。Operationごとに変える必要はない
  clientId: String!

  # room.upOperationをJSONにしたもの
  valueJson: String!
}

type RoomPrivateMessage {
  altTextToSecret: String

  # 発言がCharacterと紐付いているときはnon-nullish。PLとしての発言、もしくはcreatedByがnullishのときはnullish。後からCharacterの値が更新されても、この値が更新されることはない。
  character: CharacterValueForMessage
  commandResult: CommandResult
  createdAt: Float!
  createdBy: String
  customName: String
  initText: String
  initTextSource: String
  isSecret: Boolean!
  messageId: String!
  textColor: String
  updatedAt: Float
  updatedText: UpdatedText
  visibleTo: [String!]!
}

type RoomPrivateMessageUpdate {
  altTextToSecret: String
  commandResult: CommandResult
  initText: String
  initTextSource: String
  isSecret: Boolean!
  messageId: String!
  updatedAt: Float
  updatedText: UpdatedText
}

type RoomPublicChannel {
  # 現在の仕様では、$system, $free, '1', … , '10' の12個のみをサポートしている。このうち、$systemはシステムメッセージ専用チャンネルであるため誰も書き込むことができない。'1', …, '10'はSpectatorが書き込むことはできないが、$freeはSpectatorも書き込むことができる。
  key: String!
  name: String
}

type RoomPublicChannelUpdate {
  key: String!
  name: String
}

type RoomPublicMessage {
  altTextToSecret: String
  channelKey: String!

  # 発言がCharacterと紐付いているときはnon-nullish。PLとしての発言、もしくはcreatedByがnullishのときはnullish。
  character: CharacterValueForMessage
  commandResult: CommandResult
  createdAt: Float!

  # channelKeyが$system以外のときは、システムメッセージならばnullishで、そうでないならばnullishではない。$systemのとき、原則として全てシステムメッセージであるため常にnullishになる。
  createdBy: String
  customName: String
  initText: String
  initTextSource: String
  isSecret: Boolean!
  messageId: String!
  textColor: String
  updatedAt: Float
  updatedText: UpdatedText
}

type RoomPublicMessageUpdate {
  altTextToSecret: String
  commandResult: CommandResult
  initText: String
  initTextSource: String
  isSecret: Boolean!
  messageId: String!
  updatedAt: Float
  updatedText: UpdatedText
}

type RoomSoundEffect {
  createdAt: Float!
  createdBy: String
  file: FilePath!
  messageId: String!
  volume: Float!
}

type SemVer {
  major: Float!
  minor: Float!
  patch: Float!
  prerelease: Prerelease
}

type ServerInfo {
  uploaderEnabled: Boolean!
  version: SemVer!
}

type Subscription {
  # for test
  pong: Pong!
  roomEvent(id: String!): RoomEvent
}

type UpdatedText {
  currentText: String
  updatedAt: Float!
}

type WriteRoomPrivateMessageFailureResult {
  failureType: WriteRoomPrivateMessageFailureType!
}

enum WriteRoomPrivateMessageFailureType {
  NotParticipant
  RoomNotFound
  VisibleToIsInvalid
}

union WriteRoomPrivateMessageResult = RoomPrivateMessage | WriteRoomPrivateMessageFailureResult

type WriteRoomPublicMessageFailureResult {
  failureType: WriteRoomPublicMessageFailureType!
}

enum WriteRoomPublicMessageFailureType {
  NotAllowedChannelKey
  NotAuthorized
  NotParticipant
  RoomNotFound
}

union WriteRoomPublicMessageResult = RoomPublicMessage | WriteRoomPublicMessageFailureResult

type WriteRoomSoundEffectFailureResult {
  failureType: WriteRoomSoundEffectFailureType!
}

enum WriteRoomSoundEffectFailureType {
  NotAuthorized
  NotParticipant
  RoomNotFound
}

union WriteRoomSoundEffectResult = RoomSoundEffect | WriteRoomSoundEffectFailureResult

type WritingMessageStatus {
  status: WritingMessageStatusType!
  updatedAt: Float!
  userUid: String!
}

enum WritingMessageStatusInputType {
  Cleared
  KeepWriting
  StartWriting
}

enum WritingMessageStatusType {
  Cleared
  Disconnected
  Submit
  Writing
}
