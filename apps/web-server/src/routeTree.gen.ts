/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as TosImport } from './routes/tos';
import { Route as SigninImport } from './routes/signin';
import { Route as ProfileImport } from './routes/profile';
import { Route as PrivacypolicyImport } from './routes/privacy_policy';
import { Route as LicensesImport } from './routes/licenses';
import { Route as IndexImport } from './routes/index';
import { Route as RoomsIndexImport } from './routes/rooms/index';
import { Route as TextTosImport } from './routes/text/tos';
import { Route as TextPrivacypolicyImport } from './routes/text/privacy_policy';
import { Route as TextEnvImport } from './routes/text/env';
import { Route as TestsPingpongImport } from './routes/tests/pingpong';
import { Route as RoomsCreateImport } from './routes/rooms/create';

// Create Virtual Routes

const RoomsIdLazyImport = createFileRoute('/rooms/$id')();

// Create/Update Routes

const TosRoute = TosImport.update({
    id: '/tos',
    path: '/tos',
    getParentRoute: () => rootRoute,
} as any);

const SigninRoute = SigninImport.update({
    id: '/signin',
    path: '/signin',
    getParentRoute: () => rootRoute,
} as any);

const ProfileRoute = ProfileImport.update({
    id: '/profile',
    path: '/profile',
    getParentRoute: () => rootRoute,
} as any);

const PrivacypolicyRoute = PrivacypolicyImport.update({
    id: '/privacy_policy',
    path: '/privacy_policy',
    getParentRoute: () => rootRoute,
} as any);

const LicensesRoute = LicensesImport.update({
    id: '/licenses',
    path: '/licenses',
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => rootRoute,
} as any);

const RoomsIndexRoute = RoomsIndexImport.update({
    id: '/rooms/',
    path: '/rooms/',
    getParentRoute: () => rootRoute,
} as any);

const RoomsIdLazyRoute = RoomsIdLazyImport.update({
    id: '/rooms/$id',
    path: '/rooms/$id',
    getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/rooms/$id.lazy').then(d => d.Route));

const TextTosRoute = TextTosImport.update({
    id: '/text/tos',
    path: '/text/tos',
    getParentRoute: () => rootRoute,
} as any);

const TextPrivacypolicyRoute = TextPrivacypolicyImport.update({
    id: '/text/privacy_policy',
    path: '/text/privacy_policy',
    getParentRoute: () => rootRoute,
} as any);

const TextEnvRoute = TextEnvImport.update({
    id: '/text/env',
    path: '/text/env',
    getParentRoute: () => rootRoute,
} as any);

const TestsPingpongRoute = TestsPingpongImport.update({
    id: '/tests/pingpong',
    path: '/tests/pingpong',
    getParentRoute: () => rootRoute,
} as any);

const RoomsCreateRoute = RoomsCreateImport.update({
    id: '/rooms/create',
    path: '/rooms/create',
    getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/': {
            id: '/';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        '/licenses': {
            id: '/licenses';
            path: '/licenses';
            fullPath: '/licenses';
            preLoaderRoute: typeof LicensesImport;
            parentRoute: typeof rootRoute;
        };
        '/privacy_policy': {
            id: '/privacy_policy';
            path: '/privacy_policy';
            fullPath: '/privacy_policy';
            preLoaderRoute: typeof PrivacypolicyImport;
            parentRoute: typeof rootRoute;
        };
        '/profile': {
            id: '/profile';
            path: '/profile';
            fullPath: '/profile';
            preLoaderRoute: typeof ProfileImport;
            parentRoute: typeof rootRoute;
        };
        '/signin': {
            id: '/signin';
            path: '/signin';
            fullPath: '/signin';
            preLoaderRoute: typeof SigninImport;
            parentRoute: typeof rootRoute;
        };
        '/tos': {
            id: '/tos';
            path: '/tos';
            fullPath: '/tos';
            preLoaderRoute: typeof TosImport;
            parentRoute: typeof rootRoute;
        };
        '/rooms/create': {
            id: '/rooms/create';
            path: '/rooms/create';
            fullPath: '/rooms/create';
            preLoaderRoute: typeof RoomsCreateImport;
            parentRoute: typeof rootRoute;
        };
        '/tests/pingpong': {
            id: '/tests/pingpong';
            path: '/tests/pingpong';
            fullPath: '/tests/pingpong';
            preLoaderRoute: typeof TestsPingpongImport;
            parentRoute: typeof rootRoute;
        };
        '/text/env': {
            id: '/text/env';
            path: '/text/env';
            fullPath: '/text/env';
            preLoaderRoute: typeof TextEnvImport;
            parentRoute: typeof rootRoute;
        };
        '/text/privacy_policy': {
            id: '/text/privacy_policy';
            path: '/text/privacy_policy';
            fullPath: '/text/privacy_policy';
            preLoaderRoute: typeof TextPrivacypolicyImport;
            parentRoute: typeof rootRoute;
        };
        '/text/tos': {
            id: '/text/tos';
            path: '/text/tos';
            fullPath: '/text/tos';
            preLoaderRoute: typeof TextTosImport;
            parentRoute: typeof rootRoute;
        };
        '/rooms/$id': {
            id: '/rooms/$id';
            path: '/rooms/$id';
            fullPath: '/rooms/$id';
            preLoaderRoute: typeof RoomsIdLazyImport;
            parentRoute: typeof rootRoute;
        };
        '/rooms/': {
            id: '/rooms/';
            path: '/rooms';
            fullPath: '/rooms';
            preLoaderRoute: typeof RoomsIndexImport;
            parentRoute: typeof rootRoute;
        };
    }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
    '/': typeof IndexRoute;
    '/licenses': typeof LicensesRoute;
    '/privacy_policy': typeof PrivacypolicyRoute;
    '/profile': typeof ProfileRoute;
    '/signin': typeof SigninRoute;
    '/tos': typeof TosRoute;
    '/rooms/create': typeof RoomsCreateRoute;
    '/tests/pingpong': typeof TestsPingpongRoute;
    '/text/env': typeof TextEnvRoute;
    '/text/privacy_policy': typeof TextPrivacypolicyRoute;
    '/text/tos': typeof TextTosRoute;
    '/rooms/$id': typeof RoomsIdLazyRoute;
    '/rooms': typeof RoomsIndexRoute;
}

export interface FileRoutesByTo {
    '/': typeof IndexRoute;
    '/licenses': typeof LicensesRoute;
    '/privacy_policy': typeof PrivacypolicyRoute;
    '/profile': typeof ProfileRoute;
    '/signin': typeof SigninRoute;
    '/tos': typeof TosRoute;
    '/rooms/create': typeof RoomsCreateRoute;
    '/tests/pingpong': typeof TestsPingpongRoute;
    '/text/env': typeof TextEnvRoute;
    '/text/privacy_policy': typeof TextPrivacypolicyRoute;
    '/text/tos': typeof TextTosRoute;
    '/rooms/$id': typeof RoomsIdLazyRoute;
    '/rooms': typeof RoomsIndexRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    '/': typeof IndexRoute;
    '/licenses': typeof LicensesRoute;
    '/privacy_policy': typeof PrivacypolicyRoute;
    '/profile': typeof ProfileRoute;
    '/signin': typeof SigninRoute;
    '/tos': typeof TosRoute;
    '/rooms/create': typeof RoomsCreateRoute;
    '/tests/pingpong': typeof TestsPingpongRoute;
    '/text/env': typeof TextEnvRoute;
    '/text/privacy_policy': typeof TextPrivacypolicyRoute;
    '/text/tos': typeof TextTosRoute;
    '/rooms/$id': typeof RoomsIdLazyRoute;
    '/rooms/': typeof RoomsIndexRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths:
        | '/'
        | '/licenses'
        | '/privacy_policy'
        | '/profile'
        | '/signin'
        | '/tos'
        | '/rooms/create'
        | '/tests/pingpong'
        | '/text/env'
        | '/text/privacy_policy'
        | '/text/tos'
        | '/rooms/$id'
        | '/rooms';
    fileRoutesByTo: FileRoutesByTo;
    to:
        | '/'
        | '/licenses'
        | '/privacy_policy'
        | '/profile'
        | '/signin'
        | '/tos'
        | '/rooms/create'
        | '/tests/pingpong'
        | '/text/env'
        | '/text/privacy_policy'
        | '/text/tos'
        | '/rooms/$id'
        | '/rooms';
    id:
        | '__root__'
        | '/'
        | '/licenses'
        | '/privacy_policy'
        | '/profile'
        | '/signin'
        | '/tos'
        | '/rooms/create'
        | '/tests/pingpong'
        | '/text/env'
        | '/text/privacy_policy'
        | '/text/tos'
        | '/rooms/$id'
        | '/rooms/';
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    LicensesRoute: typeof LicensesRoute;
    PrivacypolicyRoute: typeof PrivacypolicyRoute;
    ProfileRoute: typeof ProfileRoute;
    SigninRoute: typeof SigninRoute;
    TosRoute: typeof TosRoute;
    RoomsCreateRoute: typeof RoomsCreateRoute;
    TestsPingpongRoute: typeof TestsPingpongRoute;
    TextEnvRoute: typeof TextEnvRoute;
    TextPrivacypolicyRoute: typeof TextPrivacypolicyRoute;
    TextTosRoute: typeof TextTosRoute;
    RoomsIdLazyRoute: typeof RoomsIdLazyRoute;
    RoomsIndexRoute: typeof RoomsIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    LicensesRoute: LicensesRoute,
    PrivacypolicyRoute: PrivacypolicyRoute,
    ProfileRoute: ProfileRoute,
    SigninRoute: SigninRoute,
    TosRoute: TosRoute,
    RoomsCreateRoute: RoomsCreateRoute,
    TestsPingpongRoute: TestsPingpongRoute,
    TextEnvRoute: TextEnvRoute,
    TextPrivacypolicyRoute: TextPrivacypolicyRoute,
    TextTosRoute: TextTosRoute,
    RoomsIdLazyRoute: RoomsIdLazyRoute,
    RoomsIndexRoute: RoomsIndexRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/licenses",
        "/privacy_policy",
        "/profile",
        "/signin",
        "/tos",
        "/rooms/create",
        "/tests/pingpong",
        "/text/env",
        "/text/privacy_policy",
        "/text/tos",
        "/rooms/$id",
        "/rooms/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/licenses": {
      "filePath": "licenses.tsx"
    },
    "/privacy_policy": {
      "filePath": "privacy_policy.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/tos": {
      "filePath": "tos.tsx"
    },
    "/rooms/create": {
      "filePath": "rooms/create.tsx"
    },
    "/tests/pingpong": {
      "filePath": "tests/pingpong.tsx"
    },
    "/text/env": {
      "filePath": "text/env.tsx"
    },
    "/text/privacy_policy": {
      "filePath": "text/privacy_policy.tsx"
    },
    "/text/tos": {
      "filePath": "text/tos.tsx"
    },
    "/rooms/$id": {
      "filePath": "rooms/$id.lazy.tsx"
    },
    "/rooms/": {
      "filePath": "rooms/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
