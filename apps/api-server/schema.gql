# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AnswerRollCallFailureType {
  NotAuthorizedParticipant
  RollCallNotFound
  RoomNotFound
  TooManyRequests
}

type AnswerRollCallResult {
  failureType: AnswerRollCallFailureType
}

type AvailableGameSystem {
  id: String!
  name: String!
  sortKey: String!
}

enum ChangeParticipantNameFailureType {
  NotFound
  NotParticipant
}

type ChangeParticipantNameResult {
  failureType: ChangeParticipantNameFailureType
}

type CharacterValueForMessage {
  image: FilePath
  isPrivate: Boolean!
  name: String!
  portraitImage: FilePath
  stateId: String!
}

enum CloseRollCallFailureType {
  AlreadyClosed
  NotAuthorizedParticipant
  RollCallNotFound
  RoomNotFound
  TooManyRequests
}

type CloseRollCallResult {
  failureType: CloseRollCallFailureType
}

type CommandResult {
  """成功判定のないコマンドの場合はnullish。成功判定のあるコマンドの場合はその結果。"""
  isSuccess: Boolean
  text: String!
}

type CreateRoomFailureResult {
  failureType: CreateRoomFailureType!
}

enum CreateRoomFailureType {
  UnknownError
}

input CreateRoomInput {
  participantName: String!
  playerPassword: String
  roomName: String!
  spectatorPassword: String
}

union CreateRoomResult = CreateRoomFailureResult | CreateRoomSuccessResult

type CreateRoomSuccessResult {
  room: RoomGetState!
  roomId: String!
}

enum DeleteMessageFailureType {
  MessageDeleted
  MessageNotFound
  NotParticipant
  NotYourMessage
  RoomNotFound
}

type DeleteMessageResult {
  failureType: DeleteMessageFailureType
}

enum DeleteRoomAsAdminFailureType {
  NotFound
}

type DeleteRoomAsAdminResult {
  failureType: DeleteRoomAsAdminFailureType
}

enum DeleteRoomFailureType {
  NotCreatedByYou
  NotFound
}

type DeleteRoomOperation {
  deletedBy: String!
  deletedByAdmin: Boolean!
}

type DeleteRoomResult {
  failureType: DeleteRoomFailureType
}

input EditFileTagActionInput {
  add: [String!]!
  filename: String!
  remove: [String!]!
}

input EditFileTagsInput {
  actions: [EditFileTagActionInput!]!
}

enum EditMessageFailureType {
  MessageDeleted
  MessageNotFound
  NotParticipant
  NotYourMessage
  RoomNotFound
}

type EditMessageResult {
  failureType: EditMessageFailureType
}

type EntryToServerResult {
  type: EntryWithPasswordResultType!
}

enum EntryWithPasswordResultType {
  AlreadyEntried
  NotSignIn
  PasswordRequired
  Success
  WrongPassword
}

type FileItem {
  createdAt: Float

  """ファイルをアップロードしたユーザー。Firebase AuthenticationのUserUidで表現される。"""
  createdBy: String!

  """サーバーで管理されているファイル名。axiosなどでファイルを取得する際はこれを用いる。ソートするとアップロードした時系列順になる。"""
  filename: ID!
  listType: FileListType!

  """ユーザーが名付けたファイル名。"""
  screenname: String!

  """サムネイル画像のファイル名。axiosなどを用いてファイルを取得する。"""
  thumbFilename: String
}

enum FileListType {
  Public
  Unlisted
}

type FilePath {
  path: String!
  sourceType: FileSourceType!
}

input FilePathInput {
  path: String!
  sourceType: FileSourceType!
}

enum FileSourceType {
  Default
  FirebaseStorage
  Uploader
}

type FileTag {
  id: String!
  name: String!
}

type GetAvailableGameSystemsResult {
  value: [AvailableGameSystem!]!
}

input GetFilesInput {
  """
  FileTagのidを指定することで、指定したタグが付いているファイルのみを抽出して表示する。例えばidがx,yの3つのタグが付いているファイルは、[]や[x]や[x,y]と指定した場合にマッチするが、[x,y,z]と指定された場合は除外される。
  """
  fileTagIds: [String!]!
}

type GetFilesResult {
  files: [FileItem!]!
}

type GetJoinedRoomResult {
  """自分の現在のParticipantRoleType。room.roleと同じ値をとる。"""
  role: ParticipantRole!
  room: RoomGetState!
}

type GetNonJoinedRoomResult {
  roomAsListItem: RoomAsListItem!
}

type GetRoomAsListItemFailureResult {
  failureType: GetRoomFailureType!
}

union GetRoomAsListItemResult = GetRoomAsListItemFailureResult | GetRoomAsListItemSuccessResult

type GetRoomAsListItemSuccessResult {
  room: RoomAsListItem!
}

enum GetRoomConnectionFailureType {
  NotParticipant
  RoomNotFound
}

type GetRoomConnectionsFailureResult {
  failureType: GetRoomConnectionFailureType!
}

union GetRoomConnectionsResult = GetRoomConnectionsFailureResult | GetRoomConnectionsSuccessResult

type GetRoomConnectionsSuccessResult {
  connectedUserUids: [String!]!
  fetchedAt: Float!
}

type GetRoomFailureResult {
  failureType: GetRoomFailureType!
}

enum GetRoomFailureType {
  NotFound
}

type GetRoomLogFailureResult {
  failureType: GetRoomLogFailureType!
}

enum GetRoomLogFailureType {
  NotAuthorized
  NotParticipant
  RoomNotFound
  UnknownError
}

union GetRoomLogResult = GetRoomLogFailureResult | RoomMessages

type GetRoomMessagesFailureResult {
  failureType: GetRoomMessagesFailureType!
}

enum GetRoomMessagesFailureType {
  NotParticipant
  RoomNotFound
}

union GetRoomMessagesResult = GetRoomMessagesFailureResult | RoomMessages

union GetRoomResult = GetJoinedRoomResult | GetNonJoinedRoomResult | GetRoomFailureResult

type GetRoomsListFailureResult {
  failureType: GetRoomFailureType!
}

union GetRoomsListResult = GetRoomsListFailureResult | GetRoomsListSuccessResult

type GetRoomsListSuccessResult {
  rooms: [RoomAsListItem!]!
}

type JoinRoomFailureResult {
  failureType: JoinRoomFailureType!
}

enum JoinRoomFailureType {
  AlreadyParticipant
  NotFound
  TransformError
  WrongPassword
}

union JoinRoomResult = JoinRoomFailureResult | JoinRoomSuccessResult

type JoinRoomSuccessResult {
  operation: RoomOperation
}

enum LeaveRoomFailureType {
  NotFound
  NotParticipant
}

type LeaveRoomResult {
  failureType: LeaveRoomFailureType
}

enum MakeMessageNotSecretFailureType {
  MessageNotFound
  NotParticipant
  NotSecret
  NotYourMessage
  RoomNotFound
}

type MakeMessageNotSecretResult {
  failureType: MakeMessageNotSecretFailureType
}

type Mutation {
  answerRollCall(answer: Boolean!, rollCallId: String!, roomId: String!): AnswerRollCallResult!
  changeParticipantName(newName: String!, roomId: String!): ChangeParticipantNameResult!
  closeRollCall(rollCallId: String!, roomId: String!): CloseRollCallResult!
  createFileTag(tagName: String!): FileTag @deprecated(reason: "Use screenname to group files by folders instead.")
  createRoom(input: CreateRoomInput!): CreateRoomResult!
  deleteFileTag(tagId: String!): Boolean! @deprecated(reason: "Use screenname to group files by folders instead.")
  deleteFiles(filenames: [String!]!): [String!]!
  deleteMessage(messageId: String!, roomId: String!): DeleteMessageResult!
  deleteRoom(roomId: String!): DeleteRoomResult!
  deleteRoomAsAdmin(roomId: String!): DeleteRoomAsAdminResult!
  editFileTags(input: EditFileTagsInput!): Boolean! @deprecated(reason: "Use screenname to group files by folders instead.")
  editMessage(messageId: String!, roomId: String!, text: String!): EditMessageResult!

  """
  エントリーを試みます。エントリーパスワードが設定されている場合は password を渡す必要があります。エントリーしているかどうかの確認にも用いることができ、その際は password は渡す必要はありません。
  """
  entryToServer(password: String): EntryToServerResult!
  joinRoomAsPlayer(name: String!, password: String, roomId: String!): JoinRoomResult!
  joinRoomAsSpectator(name: String!, password: String, roomId: String!): JoinRoomResult!
  leaveRoom(roomId: String!): LeaveRoomResult!
  makeMessageNotSecret(messageId: String!, roomId: String!): MakeMessageNotSecretResult!

  """この Mutation を直接実行することは非推奨です。代わりに @flocon-trpg/sdk を用いてください。"""
  operateRoom(operation: RoomOperationInput!, prevRevision: Int!, requestId: String!, roomId: String!): OperateRoomResult!
  performRollCall(input: PerformRollCallInput!): PerformRollCallResult!
  promoteToPlayer(password: String, roomId: String!): PromoteResult!
  renameFiles(input: [RenameFileInput!]!): [String!]!
  resetMessages(roomId: String!): ResetRoomMessagesResult!
  updateBookmark(newValue: Boolean!, roomId: String!): UpdateBookmarkResult!

  """この Mutation を直接実行することは非推奨です。代わりに @flocon-trpg/sdk を用いてください。"""
  updateWritingMessageStatus(newStatus: WritingMessageStatusInputType!, roomId: String!): Boolean!
  writePrivateMessage(
    characterId: String
    customName: String

    """BCDiceのgameType。"""
    gameType: String
    roomId: String!
    text: String!
    textColor: String
    visibleTo: [String!]!
  ): WriteRoomPrivateMessageResult!
  writePublicMessage(
    channelKey: String!
    characterId: String
    customName: String

    """BCDiceのgameType。"""
    gameType: String
    roomId: String!
    text: String!
    textColor: String
  ): WriteRoomPublicMessageResult!
  writeRoomSoundEffect(file: FilePathInput!, roomId: String!, volume: Float!): WriteRoomSoundEffectResult!
}

type OperateRoomFailureResult {
  failureType: OperateRoomFailureType!
}

enum OperateRoomFailureType {
  NotFound
}

type OperateRoomIdResult {
  requestId: String!
}

type OperateRoomNonJoinedResult {
  roomAsListItem: RoomAsListItem!
}

union OperateRoomResult = OperateRoomFailureResult | OperateRoomIdResult | OperateRoomNonJoinedResult | OperateRoomSuccessResult

type OperateRoomSuccessResult {
  operation: RoomOperation!
}

type OperatedBy {
  clientId: String!
  userUid: String!
}

enum ParticipantRole {
  Master
  Player
  Spectator
}

enum PerformRollCallFailureType {
  HasOpenRollCall
  NotAuthorizedParticipant
  NotFound
  TooManyRequests
}

input PerformRollCallInput {
  roomId: String!

  """SE を設定する場合、これと併せて soundEffectVolume もセットする必要があります。"""
  soundEffectFile: FilePathInput

  """SE を設定する場合、これと併せて soundEffectFile もセットする必要があります。"""
  soundEffectVolume: Float
}

type PerformRollCallResult {
  failureType: PerformRollCallFailureType
}

type PieceLog {
  createdAt: Float!
  logType: PieceLogType!
  messageId: String!
  stateId: String!
  valueJson: String!
}

enum PieceLogType {
  Dice
  String
}

type Prerelease {
  type: PrereleaseType!
  version: Float!
}

input PrereleaseInput {
  type: PrereleaseType!
  version: Float!
}

enum PrereleaseType {
  Alpha
  Beta
  Rc
}

enum PromoteFailureType {
  NoNeedToPromote
  NotFound
  NotParticipant
  WrongPassword
}

type PromoteResult {
  failureType: PromoteFailureType
}

type Query {
  getAvailableGameSystems: GetAvailableGameSystemsResult!
  getDiceHelpMessage(gameSystemId: String!): String
  getFiles(input: GetFilesInput!): GetFilesResult!
  getLog(roomId: String!): GetRoomLogResult!
  getMessages(roomId: String!): GetRoomMessagesResult!
  getMyRoles: Roles!

  """
  通常はこの Query を直接実行する必要はありません。@flocon-trpg/sdk を用いることで、リアルタイムに Room を取得および自動更新できます。
  """
  getRoom(roomId: String!): GetRoomResult!
  getRoomAsListItem(roomId: String!): GetRoomAsListItemResult!

  """
  通常はこの Query を直接実行する必要はありません。@flocon-trpg/sdk を用いることで、リアルタイムに値を取得および自動更新できます。
  """
  getRoomConnections(roomId: String!): GetRoomConnectionsResult!
  getRoomsList: GetRoomsListResult!
  getServerInfo: ServerInfo!
}

input RenameFileInput {
  filename: String!
  newScreenname: String!
}

enum ResetRoomMessagesFailureType {
  NotAuthorized
  NotParticipant
  RoomNotFound
}

type ResetRoomMessagesResult {
  failureType: ResetRoomMessagesFailureType
}

type Roles {
  admin: Boolean!
}

type RoomAsListItem {
  createdAt: Float

  """この部屋の作成者。Firebase AuthenticationのUserUidで表現される。"""
  createdBy: String!
  isBookmarked: Boolean!
  name: String!
  requiresPlayerPassword: Boolean!
  requiresSpectatorPassword: Boolean!
  role: ParticipantRole
  roomId: ID!

  """
  データベースのRoomエンティティが最後に更新された日時。Roomエンティティのみが対象であるため、例えばメッセージの投稿などは反映されないことに注意。
  """
  updatedAt: Float
}

type RoomConnectionEvent {
  isConnected: Boolean!
  updatedAt: Float!
  userUid: String!
}

type RoomEvent {
  deleteRoomOperation: DeleteRoomOperation
  isRoomMessagesResetEvent: Boolean!
  roomConnectionEvent: RoomConnectionEvent
  roomMessageEvent: RoomMessageEvent
  roomOperation: RoomOperation
  writingMessageStatus: WritingMessageStatus
}

type RoomGetState {
  createdAt: Float

  """この部屋の作成者。Firebase AuthenticationのUserUidで表現される。"""
  createdBy: String!
  isBookmarked: Boolean!

  """
  Current revision of Room. Whenever Room is updated, this value is incremented by 1. This value is required when you apply RoomOperation. / Roomの現在のリビジョン。Roomが更新されるたび、この値は1増加する。RoomOperationを適用する際に必要となる。
  """
  revision: Float!
  role: ParticipantRole

  """room.state をJSON化したもの"""
  stateJson: String!

  """
  データベースのRoomエンティティが最後に更新された日時。Roomエンティティのみが対象であるため、例えばメッセージの投稿などは反映されないことに注意。
  """
  updatedAt: Float
}

union RoomMessageEvent = PieceLog | RoomMessagesReset | RoomPrivateMessage | RoomPrivateMessageUpdate | RoomPublicChannel | RoomPublicChannelUpdate | RoomPublicMessage | RoomPublicMessageUpdate | RoomSoundEffect

type RoomMessageSyntaxError {
  errorMessage: String!
}

type RoomMessages {
  pieceLogs: [PieceLog!]!
  privateMessages: [RoomPrivateMessage!]!
  publicChannels: [RoomPublicChannel!]!
  publicMessages: [RoomPublicMessage!]!
  soundEffects: [RoomSoundEffect!]!
}

type RoomMessagesReset {
  publicMessagesDeleted: Boolean!
}

type RoomOperation {
  """operateRoomを呼んだ人物。promoteなどの結果の場合はnullishになる。"""
  operatedBy: OperatedBy
  revisionTo: Float!

  """room.upOperationをJSONにしたもの。idならばnullish。"""
  valueJson: String!
}

input RoomOperationInput {
  """クライアントを識別するID。適当なIDをクライアント側で生成して渡す。Operationごとに変える必要はない"""
  clientId: String!

  """room.upOperationをJSONにしたもの"""
  valueJson: String!
}

type RoomPrivateMessage {
  altTextToSecret: String

  """
  発言がCharacterと紐付いているときはnon-nullish。PLとしての発言、もしくはcreatedByがnullishのときはnullish。後からCharacterの値が更新されても、この値が更新されることはない。
  """
  character: CharacterValueForMessage
  commandResult: CommandResult
  createdAt: Float!
  createdBy: String
  customName: String
  initText: String
  initTextSource: String
  isSecret: Boolean!
  messageId: String!
  textColor: String
  updatedAt: Float
  updatedText: UpdatedText
  visibleTo: [String!]!
}

type RoomPrivateMessageUpdate {
  altTextToSecret: String
  commandResult: CommandResult
  initText: String
  initTextSource: String
  isSecret: Boolean!
  messageId: String!
  updatedAt: Float
  updatedText: UpdatedText
}

type RoomPublicChannel {
  """
  現在の仕様では、$system, $free, '1', … , '10' の12個のみをサポートしている。このうち、$systemはシステムメッセージ専用チャンネルであるため誰も書き込むことができない。'1', …, '10'はSpectatorが書き込むことはできないが、$freeはSpectatorも書き込むことができる。
  """
  key: String!
  name: String
}

type RoomPublicChannelUpdate {
  key: String!
  name: String
}

type RoomPublicMessage {
  altTextToSecret: String
  channelKey: String!

  """
  発言がCharacterと紐付いているときはnon-nullish。PLとしての発言、もしくはcreatedByがnullishのときはnullish。
  """
  character: CharacterValueForMessage
  commandResult: CommandResult
  createdAt: Float!

  """
  channelKeyが$system以外のときは、システムメッセージならばnullishで、そうでないならばnullishではない。$systemのとき、原則として全てシステムメッセージであるため常にnullishになる。
  """
  createdBy: String
  customName: String
  initText: String
  initTextSource: String
  isSecret: Boolean!
  messageId: String!
  textColor: String
  updatedAt: Float
  updatedText: UpdatedText
}

type RoomPublicMessageUpdate {
  altTextToSecret: String
  commandResult: CommandResult
  initText: String
  initTextSource: String
  isSecret: Boolean!
  messageId: String!
  updatedAt: Float
  updatedText: UpdatedText
}

type RoomSoundEffect {
  createdAt: Float!
  createdBy: String
  file: FilePath!
  messageId: String!
  volume: Float!
}

type SemVer {
  major: Float!
  minor: Float!
  patch: Float!
  prerelease: Prerelease
}

input SemVerInput {
  major: Float!
  minor: Float!
  patch: Float!
  prerelease: PrereleaseInput
}

type ServerInfo {
  uploaderEnabled: Boolean!
  version: SemVer!
}

type Subscription {
  """この Subscription を直接実行することは非推奨です。代わりに @flocon-trpg/sdk を用いてください。"""
  roomEvent(roomId: String!): RoomEvent!
}

type UpdateBookmarkFailureResult {
  failureType: UpdateBookmarkFailureType!
}

enum UpdateBookmarkFailureType {
  NotFound
}

union UpdateBookmarkResult = UpdateBookmarkFailureResult | UpdateBookmarkSuccessResult

type UpdateBookmarkSuccessResult {
  currentValue: Boolean!
  prevValue: Boolean!
}

type UpdatedText {
  currentText: String
  updatedAt: Float!
}

type WriteRoomPrivateMessageFailureResult {
  failureType: WriteRoomPrivateMessageFailureType!
}

enum WriteRoomPrivateMessageFailureType {
  NotParticipant
  RoomNotFound
  SyntaxError
  VisibleToIsInvalid
}

union WriteRoomPrivateMessageResult = RoomMessageSyntaxError | RoomPrivateMessage | WriteRoomPrivateMessageFailureResult

type WriteRoomPublicMessageFailureResult {
  failureType: WriteRoomPublicMessageFailureType!
}

enum WriteRoomPublicMessageFailureType {
  NotAllowedChannelKey
  NotAuthorized
  NotParticipant
  RoomNotFound
  SyntaxError
}

union WriteRoomPublicMessageResult = RoomMessageSyntaxError | RoomPublicMessage | WriteRoomPublicMessageFailureResult

type WriteRoomSoundEffectFailureResult {
  failureType: WriteRoomSoundEffectFailureType!
}

enum WriteRoomSoundEffectFailureType {
  NotAuthorized
  NotParticipant
  RoomNotFound
}

union WriteRoomSoundEffectResult = RoomSoundEffect | WriteRoomSoundEffectFailureResult

type WritingMessageStatus {
  status: WritingMessageStatusType!
  updatedAt: Float!
  userUid: String!
}

enum WritingMessageStatusInputType {
  Cleared
  KeepWriting
  StartWriting
}

enum WritingMessageStatusType {
  Cleared
  Disconnected
  Submit
  Writing
}