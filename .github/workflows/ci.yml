name: CI

on: [push, pull_request]

jobs:
    main:
        name: Tests and exec Next.js export on Node ${{ matrix.node }} and ${{ matrix.os }}

        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                node: ['14.x', '16.x']
                os: [ubuntu-latest, windows-latest, macOS-latest]

        steps:
            - uses: actions/checkout@v2

            - name: Use Node ${{ matrix.node }}
              uses: actions/setup-node@v2
              with:
                  node-version: ${{ matrix.node }}
                  cache: yarn

            - run: yarn install

            - name: Prepare packages
              run: yarn build-ci

            - name: Test
              run: yarn test --ci --coverage --maxWorkers=2
              env:
                  TEST_SKIP_REDIS: true
                  TEST_SKIP_RESOLVERS: true

            - name: Next export
              run: yarn run build:self && yarn run export
              working-directory: ./packages/web-server
              env:
                  NEXT_PUBLIC_FLOCON_FIREBASE_CONFIG: ${{ secrets.NEXT_PUBLIC_FLOCON_FIREBASE_CONFIG }}
                  NEXT_PUBLIC_FLOCON_WEB_CONFIG: ${{ secrets.NEXT_PUBLIC_FLOCON_WEB_CONFIG }}

    test-cache-redis:
        name: Tests cache with Redis on Node ${{ matrix.node }} and ${{ matrix.os }}

        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ./packages/cache
        strategy:
            matrix:
                node: ['16.x']

        steps:
            - uses: actions/checkout@v2

            - name: Use Node ${{ matrix.node }}
              uses: actions/setup-node@v2
              with:
                  node-version: ${{ matrix.node }}
                  cache: yarn

            # https://docs.github.com/ja/actions/using-containerized-services/creating-redis-service-containers の方法だとRedisに接続できなかったため、代わりに採用している
            - name: Start Redis
              uses: supercharge/redis-github-action@1.2.0
              with:
                  redis-version: 6

            - run: yarn

            - name: Prepare packages
              run: yarn build-ci
              working-directory: '.'

            - name: Test
              run: yarn test --ci --coverage --maxWorkers=2

    test-api-server:
        name: Type-check and tests api-server on ${{ matrix.container }}

        strategy:
            matrix:
                container: ['node:14']
        defaults:
            run:
                working-directory: ./packages/api-server
        runs-on: ubuntu-latest
        container: ${{ matrix.container }}

        services:
            postgres:
                image: postgres
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        steps:
            - name: Checkout repo
              uses: actions/checkout@v2

            - name: Install
              run: yarn

            - name: Prepare packages
              run: yarn build-ci
              working-directory: '.'

            - name: Type-check
              run: yarn type-check

            - name: Migration-up SQLite(1)
              run: yarn migration-up --db sqlite
              env:
                  FLOCON_API_SQLITE: >
                      {
                          "dbName": "./test1.sqlite3"
                      }
                  FLOCON_API_ENTRY_PASSWORD: >
                      {
                          "type": "none"
                      }

            - name: Migration-up SQLite(2)
              run: yarn migration-up --db sqlite
              env:
                  FLOCON_API_SQLITE: >
                      {
                          "dbName": "./test2.sqlite3"
                      }
                  FLOCON_API_ENTRY_PASSWORD: >
                      {
                          "type": "none"
                      }

            - name: Migration-up PostgreSQL
              run: yarn migration-up --db postgresql
              env:
                  FLOCON_API_POSTGRESQL: >
                      {
                          "dbName": "test",
                          "clientUrl": "postgresql://postgres:postgres@postgres:5432"
                      }
                  FLOCON_API_ENTRY_PASSWORD: >
                      {
                          "type": "none"
                      }

            # skips `yarn build` because it already has js files

            - name: Test
              run: yarn test --ci --coverage --maxWorkers=2
