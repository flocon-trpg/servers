name: CI

on:
    push:
        branches:
            - '**'
        tags-ignore:
            - '**'
    pull_request:
        branches:
            - '**'

jobs:
    tests-without-docker:
        name: Tests without PostgreSQL and MySQL, then exec Next.js export on Node ${{ matrix.node }} and ${{ matrix.os }}

        strategy:
            matrix:
                node: ['14.x', '16.x', '18.x']
                os: [ubuntu-22.04]
                include:
                    - node: '16.x'
                      os: 'windows-2019'
                    - node: '16.x'
                      os: 'macOS-11'

        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v3

            - name: Use Node ${{ matrix.node }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node }}
                  cache: yarn

            - run: node --version

            - run: yarn install

            - name: Test for Node 16 or higher
              if: ${{ matrix.node != '14.x' }}
              run: yarn test --ci --coverage --runInBand
              env:
                  REDIS_TEST: 0
                  MYSQL_TEST: 0
                  POSTGRESQL_TEST: 0

            - name: Test for Node 14
              if: ${{ matrix.node == '14.x' }}
              run: yarn test-node14 --ci --coverage --runInBand
              env:
                  REDIS_TEST: 0
                  MYSQL_TEST: 0
                  POSTGRESQL_TEST: 0

            - name: Next export
              run: yarn run export
              working-directory: ./apps/web-server

    tests-with-docker:
        name: 'Full tests on ${{ matrix.container }} and Codecov'

        strategy:
            matrix:
                container: ['node:14-buster', 'node:16-buster', 'node:18-buster']

        runs-on: ubuntu-22.04
        container: ${{ matrix.container }}

        services:
            mysql:
                image: mysql:8.0
                env:
                    MYSQL_ROOT_PASSWORD: root_password
                    MYSQL_USER: test
                    MYSQL_PASSWORD: test
                    MYSQL_DATABASE: test
                options: >-
                    --health-cmd "mysqladmin ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 3306:3306
            postgres:
                image: postgres
                env:
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                    POSTGRES_DB: test
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432
            redis:
                image: redis
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5

        steps:
            - name: Checkout repo
              uses: actions/checkout@v3

            - run: node --version

            - name: Install
              run: yarn

            - name: Migration-up MySQL
              run: yarn migration-up --db mysql
              working-directory: ./apps/api-server
              env:
                  MYSQL: >
                      {
                          "clientUrl": "mysql://test:test@mysql:3306/test"
                      }

            - name: Migration-up PostgreSQL
              run: yarn migration-up --db postgresql
              working-directory: ./apps/api-server
              env:
                  POSTGRESQL: >
                      {
                          "clientUrl": "postgresql://test:test@postgres:5432/test"
                      }

            - name: Test for Node 16 or higher
              if: ${{ matrix.container != 'node:14-buster' }}
              run: yarn test --ci --coverage --runInBand

            - name: Test for Node 14
              if: ${{ matrix.container == 'node:14-buster' }}
              run: yarn test-node14 --ci --coverage --runInBand

            - name: Upload coverages to Codecov
              if: ${{ matrix.container == 'node:16-buster' }}
              uses: codecov/codecov-action@v3
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}

    # fails on windows because it uses crlf
    check-format:
        name: Check lint, prettier, and sort-package-json

        runs-on: ubuntu-22.04

        steps:
            - uses: actions/checkout@v3

            - name: Use Node 16.x
              uses: actions/setup-node@v3
              with:
                  node-version: 16.x
                  cache: yarn

            - run: yarn

            - name: Lint
              run: yarn lint

            - name: Prettier(check)
              run: yarn prettier-check

            - name: sort-package-json(check)
              run: yarn sort-package-json --check

    check-artifacts:
        name: Check artifacts

        runs-on: ubuntu-22.04

        steps:
            - name: List git config
              run: git config -l

            - uses: actions/checkout@v3

            - name: Use Node 18.x
              uses: actions/setup-node@v3
              with:
                  node-version: 18.x
                  cache: yarn

            - run: yarn

            - name: Build css file
              run: yarn build-less
              working-directory: ./apps/web-server

            # 必要のない web-server のビルドも行われる。web-server のみを除外するとその除外処理でミスが生じる余地があるため、web-server も含めてまとめてビルドしている。
            - name: Generate dist
              run: yarn build

            - name: Generate licenses disclaimer
              run: yarn generate-disclaimer

            - name: Prepare for Clean CRLF
              run: git config --local core.autocrlf input

            - name: Clean CRLF
              run: git add . && git reset

            - name: Fail if not all the artifacts are OK
              uses: numtide/clean-git-action@v1

    publish-storybook:
        name: Publish Storybook to Chromatic

        if: ${{ github.event_name == 'push' }}

        needs: [tests-with-docker, tests-without-docker]

        runs-on: ubuntu-22.04

        steps:
            - uses: actions/checkout@v3
              with:
                  # Requires full git history: https://github.com/chromaui/action#getting-started
                  fetch-depth: 0

            - name: Use Node 16.x
              uses: actions/setup-node@v3
              with:
                  node-version: 16.x
                  cache: yarn

            - run: yarn

            - name: Publish to Chromatic
              uses: chromaui/action@v1
              with:
                  workingDir: ./apps/web-server
                  projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
